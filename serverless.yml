service: tiddlywiki-serverless 

plugins:
  - serverless-domain-manager

# Custom variables
custom:

  tiddlersTableName: tiddlers
  tiddlersTableArn: 
    Fn::Join:
    - ":"
    - - arn
      - aws
      - dynamodb
      - Ref: AWS::Region
      - Ref: AWS::AccountId
      - table/${self:custom.tiddlersTableName}

  tiddlersHistoryTableName: tiddlers_history
  tiddlersHistoryTableArn: 
    Fn::Join: 
    - ":" 
    - - arn
      - aws
      - dynamodb
      - Ref: AWS::Region
      - Ref: AWS::AccountId
      - table/${self:custom.tiddlersHistoryTableName}

  customDomain:
    # Put here your own domain name
    domainName: tiddly.info

    # Change basePath if you wish to run your TW instance with a different URL path
    # e.g. example.com/tw5/
    basePath: 'serverless'
    stage: ${opt:stage}
    createRoute53Record: true
  

provider: 
    name: 'aws'
    apiKeys:
      - name: API_KEY
        value: ${opt:apikey}
    usagePlan:
      quota:
        limit: 5000
        offset: 2
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 100
    runtime: go1.x
    region: ${opt:region, 'us-east-1'}
    role: LambdaExecutionRole
    deploymentBucket:
        name: tiddlywiki-serverless
    environment:
        ENTRYPOINT: https://dynamodb.${self:provider.region}.amazonaws.com 
        WIKIFILE: index.html
        DYNAMODB_TABLE: ${self:service}-${opt:stage, self:opt.stage}
        URLPATH: '/serverless'
        READONLY: true 

package:
    individually: true
    exclude:
      - "**/*"

functions:
    # This function represents the REST API
    tiddlywiki-serverless-api:  
        name: tiddlywiki-serverless-api-${opt:stage} 
        handler: widdly-lambda
        memorySize: 128
        timeout: 30
        package:
          include:
            - widdly-lambda
            - index.html
        events:
          - http:
              path: /{any+} 
              method: put
              private: true
          - http:
              path: /{any+}
              method: delete
              private: true
          - http:
              path: /{any+}
              method: get 
          - http:
              path: /{any+}
              method: options 

    # Index will serve the index.html page
    tiddlywiki-serverless-index:  
        name: tiddlywiki-serverless-index-${opt:stage}
        handler: widdly-lambda
        memorySize: 128
        timeout: 30
        package:
          include:
            - widdly-lambda
            - index.html
        events:
          - http:
              path: /
              method: get

resources:
  Description: Serverless Tiddlywiki using DynamoDB as backend (${opt:stage})
  Resources:

    # Default Lambda execution role 
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: LambdaExecutionRole 
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: tiddlywiki-serverless-role-${opt:stage}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: 
                    - arn:aws:logs:*:*:*
                - Effect: Allow
                  Action:
                    - dynamodb:CreateTable
                    - dynamodb:DescribeTable
                    - dynamodb:UpdateTable
                    - dynamodb:GetTable
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                    - dynamodb:DeleteItem
                    - dynamodb:Query
                    - dynamodb:Scan
                  Resource: 
                    - ${self:custom.tiddlersTableArn} 
                    - ${self:custom.tiddlersHistoryTableArn} 
